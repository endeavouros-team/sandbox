#!/bin/bash

#
# Simple ranking of mirrors for the EndeavourOS mirrorlist.
#

echo2()   { echo   "$@" >&2 ; }
printf2() { printf "$@" >&2 ; }

notif_echo2()   { printf2 "==> " ; echo2   "$@" ; }
notif_printf2() { printf2 "==> " ; printf2 "$@" ; }

verbose() {
    if [ "$verbose" = "yes" ] ; then
        echo2 "  $1"
    fi
}

DeleteTmpFiles() {
    if [ ${#delete_at_end[@]} -gt 0 ] ; then
        echo2 ""
        verbose "Deleting temporary files: ${delete_at_end[*]}"
        rm -f "${delete_at_end[@]}"
    fi
}
export -f DeleteTmpFiles

RemoveFromDelList() {
    if [ ${#delete_at_end[@]} -gt 0 ] ; then
        local -r remove_me="$1"
        local oldlist=("${delete_at_end[@]}")
        local xx
        delete_at_end=()
        for xx in "${oldlist[@]}" ; do
            [ "$xx" != "$remove_me" ] && delete_at_end+=("$xx")
        done
    fi
}

DIE() {
    local msg="$1"
    local level="$2" ; [ -n "$level" ] || level=0

    notif_echo2 "$progname: error detected at function ${FUNCNAME[$((level+1))]}, line ${BASH_LINENO[$level]}:"
    echo2 "    $msg"
    DeleteTmpFiles
    exit 1
}

ShowArray() {
    local item
    for item in "$@" ; do
        echo $item
    done
}

SortMirrors() {
    local latest_ml="$1"
    local sortopts="$2"
    local marr mirror m m2
    local rank_errs=0
    local lastm=""
    local lastix ix

    readarray -t marr <<< $(grep "^Server = " $latest_ml)

    [ -n "$added_mirror" ] && marr+=("Server = $added_mirror")        # for test-ranking a mirror

    lastix=${#marr[@]}
    while [ $lastix -gt 0 ] ; do
        ((lastix--))
        lastm="${marr[$lastix]}"
        [ -n "$lastm" ] && break
    done
    if [ -z "$lastm" ] ; then
        return 1   # no mirrors!
    fi

    if [ ${#marr[@]} -gt 0 ] ; then
        for mirror in "${marr[@]}" ; do
            m=$(echo "$mirror" | awk '{print $3}')                    # mirror value (with variables)
            verbose "$m"
            m2=$(echo "$m" | sed 's|/$repo/$arch$||')                 # mirror url (without variables)
            if ! GetUpdateNumberAndTime "$m2/state" "$m"              # update number from "state" and its fetch time
            then
                ((rank_errs++))
            fi
            if [ "$mirror" = "$lastm" ] ; then
                if [ $rank_errs -ne 0 ] ; then
                    local secs=5
                    # notif_printf2 "Sleeping $secs seconds...\n"
                    sleep $secs                                       # some mirrors failed, sleep a few seconds to show it
                fi
            fi
        done | LC_ALL=C sort -g $sortopts
    fi
}

RankPerAge() {
    # latest_ml : in     # servers not commented!
    # result    : out
    local repo=endeavouros
    local arch=$(eos_GetArch)
    local mirror m m2
    local marr
    local sortopts=""
    local sort_rate="-k3,3 -k2r,2"
    local sort_age="-k2r,2 -k3,3"

    case "$sort" in
        rate | fastest | speed)
            sortopts="$sort_rate" ;;
        age | latest)
            sortopts="$sort_age" ;;
        *)
            notif_echo2 "Warning: value '$sort' of option --sort is unsupported, using 'age'."
            sortopts="$sort_age"
            ;;
    esac

    readarray -t result <<< $(SortMirrors "$latest_ml" "$sortopts")

    if [ ${#result[@]} -le 1 ] ; then
        local msg="no mirrors found!"
        [ $timeout -lt 10 ] && msg+=" Too short timeout ($timeout)?"
        DIE "$msg"
    fi
}

Warning() {
    local id="$1"
    shift
    local explanations=("$@")
    explanations+=("Continuing.")
    
    printf2 "==> Warning about %s:\n" "$id"
    printf2 "    %s\n" "${explanations[@]}"
}

GetUpdateNumberAndTime() {
    local url="$1"
    local mirror="$2"
    local tmpfile="$HOME/.eos-rank-state.123456"
    local result=0
    local retcode=0
    local time
    local nr
    local low_limit=999999           # still acceptable value (use a very high initial number!)
    local too_low_limit=999999       # fails when below this

    if [ -n "$reference_level" ] ; then
        low_limit=$((reference_level - 2))
        too_low_limit=$((reference_level - 10))
    fi

    time=$(curl --fail -Lsm $timeout -w "%{time_total}" "$url" -o"$tmpfile")
    retcode=$?
    case "$retcode" in
        0)
            nr="$(head -n1 "$tmpfile")"
            rm -f "$tmpfile"

            if [ -n "$reference_level" ] ; then
                # ad hoc tests for the update level value in the state file
                if [ $nr -gt $reference_level ] ; then
                    Warning "$mirror" "Update level $nr/$reference_level is too high (cannot be more than $reference_level)."
                    return
                elif [ $nr -lt $too_low_limit ] ; then
                    Warning "$mirror" "Update level is $nr/$reference_level, problem with the mirror?"
                    return
                elif [ $nr -lt $low_limit ] ; then
                    Warning "$mirror" "Update level is $nr/$reference_level, some packages may be outdated."
                fi
            fi
            result="$nr $time"
            echo "$mirror $result"      # "mirror nr time"
            ;;
        *)
            local curl_msg=""
            local msg=()
            local add_code=no
            case "$mirror_verbosity" in
                all | code | show)
                    case "$retcode" in
                        28) msg+=("Connection failed after $timeout seconds.") ;;
                        7)  msg+=("Connection failed. The mirror may be temporarily or permanently offline.") ;;
                        *)  msg+=("Connection failed.") ;;
                    esac
                    case "$mirror_verbosity" in
                        all)
                            curl_msg="$(curl-exit-code-to-string $retcode)"
                            if [ -n "$curl_msg" ] ; then
                                msg+=("--> (curl exit code $retcode: $curl_msg)")
                            else
                                add_code=yes
                            fi
                            ;;
                        code)
                            add_code=yes
                            ;;
                    esac
                    [ "$add_code" = "yes" ] && msg+=("--> (curl exit code $retcode.)")

                    Warning "$mirror" "${msg[@]}"
                    ;;
                none)
                    ;;
            esac
            rm -f "$tmpfile"
            return $retcode
            ;;
    esac
}

GetReferenceUpdateLevel() {
    local refroot="https://mirror.alpix.eu/endeavouros/repo"
    local result=$(GetUpdateNumberAndTime "$refroot/state" "$refroot"/'$repo/$arch')
    [ -n "$result" ] || exit 0
    reference_level=$(echo "$result" | awk '{print $2}')
}

CheckMirrorlist() {
    if [ "$internal_testing" = "yes" ] ; then
        local file="$1"
        if grep "^#[ ]*Server = " "$file" ; then
            RemoveFromDelList "$latest_ml"
            DIE "endeavouros-mirrorlist (see file $file) has one or more mirrors commented out!" 1    # 1 = level of BASH_LINENO array (which starts from 0)
        fi
    fi
}

FetchLatestMirrorlist() {
    # Grab endeavouros-mirrorlist from the package cache, or fetch it from github/gitlab.

    if [ "$use_local_mirrorlist" = "yes" ] ; then
        # Use file /etc/pacman.d/endeavouros-mirrorlist. Remove potential ranking results first.
        sed -e '/^# Results of mirror ranking at /,$d' -e 's|^#[ ]*Server = |Server = |' /etc/pacman.d/endeavouros-mirrorlist  > $latest_ml
        CheckMirrorlist "$latest_ml"
        return
    fi

    local pkg=(/var/cache/pacman/pkg/${pkgname}-*.zst)
    if [ ${#pkg[@]} -gt 0 ] ; then
        pkg="${pkg[$(( ${#pkg[@]} - 1 ))]}"
        # the package exists in the cache
        local cachev=$(echo "$pkg" | sed 's|.*list-\(.*\)-any.*|\1|')
        local installedv=$(pacman -Q $pkgname | awk '{print $2}')
        if [ "$cachev" = "$installedv" ] ; then
            notif_echo2 "Info: extracting $pkg ..."
            tar --extract -O -f "$pkg" etc/pacman.d/endeavouros-mirrorlist > $latest_ml
            CheckMirrorlist "$latest_ml"
            return
        fi
    fi
    # package not in cache or installed package version is not the same as in cache
    local code=0
    local url="$(eos-github2gitlab --keep-master "https://raw.githubusercontent.com/endeavouros-team/PKGBUILDS/master/$pkgname/$pkgname")"
    notif_echo2 "Info: fetching $url ..."
    curl --fail -Lsm $timeout -o $latest_ml $url || code=$?
    case "$code" in
        0) ;;
        *) notif_echo2 "Error: cannot fetch EndeavourOS mirrorlist info (curl error code $code)."
           exit 0
           ;;
    esac
    CheckMirrorlist "$latest_ml"
}

SimpleRank() {
    # Rank mirrors from the latest available mirrorlist file.
    #
    # The resulting mirrorlist will contain:
    # - the latest available endeavouros-mirrorlist (mirrors commented out)
    # - the results of ranking
    # - the ranked mirrorlist

    local result IGNORE=""
    local xx

    latest_ml=$(mktemp /tmp/tmp.XXXXX) ; delete_at_end+=("$latest_ml")

    FetchLatestMirrorlist

    if [ ${#EOS_IGNORED_MIRRORS[@]} -gt 0 ] ; then
        IGNORE=${EOS_IGNORED_MIRRORS[*]}
        IGNORE=${IGNORE// /\|}
        [ -n "$ignored_mirrors" ] && ignored_mirrors+="|"
        ignored_mirrors+="$IGNORE"
    fi

    local pref="$preferred_mirrors $ALWAYS_FIRST_EOS_MIRRORS"
    if [ "$pref" != " " ] ; then
        pref=${pref//\|/ }
        notif_echo2 "Info: preferring mirrors: $pref"
    fi

    if [ "$ignored_mirrors" != "" ] ; then
        notif_echo2 "Info: ignoring mirrors: ${ignored_mirrors//\|/ }"
        # grep -Pv "$ignored_mirrors" $latest_ml > $latest_ml.tmp
        # rm -f $latest_ml
        # mv $latest_ml.tmp $latest_ml
        for xx in ${ignored_mirrors//\|/ } ; do
            sed -i $latest_ml -E -e "s|^(Server[ ]*=[ ]*.*$xx.*)|#\1|"
        done
    fi

    rm -f $latest_ml.orig
    mv $latest_ml $latest_ml.orig
    delete_at_end+=("$latest_ml.orig")
    grep "^Server[ ]*=" $latest_ml.orig | sort | uniq > $latest_ml

    # $result will contain an array of lines like: "mirror update-ordinal fetch-time"
    notif_echo2 "Info: ranking EndeavourOS mirrors, please wait ..."
    RankPerAge

    echo2 ""

    # show the original list (mirrors commented out)
    if [ "$mirrorlist_only" = "no" ] ; then
        sed 's|^Server = |#Server = |' $latest_ml.orig

        # show the results of ranking (in comments)
        printf "\n# Results of mirror ranking at (UTC) %s:\n" "$(date -u "+%x %X")"
        printf "# The following fields are shown for each mirror:\n"
        printf "#   mirror:          The mirror address\n"
        printf "#   update-level:    Ordinal number of the latest update (larger is newer)\n"
        printf "#   fetch-time:      Measures the speed of the mirror (smaller is faster)\n"
        printf "#\n"
        while true ; do
            echo "mirror update-level fetch-time"
            echo "~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~"
            ShowArray "${result[@]}"
            break
        done | /usr/bin/column -t | /usr/bin/sed 's|^|# |'
    fi

    # This is the actual ranked result.

    echo ""
    echo "#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo "# EndeavourOS mirrorlist, ranked by $progname at $(date +%x\ %X)."
    if [ -n "$preferred_mirrors" ] || [ -n "$ALWAYS_FIRST_EOS_MIRRORS" ] ; then
        echo "# Preferred mirrors: ${preferred_mirrors//\|/ } ${ALWAYS_FIRST_EOS_MIRRORS//\|/ }"
    fi
    [ -n "$ignored_mirrors" ]   && echo "# Ignored mirrors: ${ignored_mirrors//\|/ }"
    echo "#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

    # Option --prefer takes precedence over variable ALWAYS_FIRST_EOS_MIRRORS when both are used.

    if [ -n "$preferred_mirrors" ] ; then
        UserAddedMirrors "$preferred_mirrors"
    fi

    if [ -n "$ALWAYS_FIRST_EOS_MIRRORS" ] ; then
        UserAddedMirrors "$ALWAYS_FIRST_EOS_MIRRORS"    # Example: ALWAYS_FIRST_EOS_MIRRORS='tuna|moson|umu'
    fi

    notif_printf2 "Results of ranking EndeavourOS mirrors:\n\n"

    ShowArray "${result[@]}" | /usr/bin/awk '{print $1}' | /usr/bin/sed 's|^|Server = |'
    echo "#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
}

UserAddedMirrors() {
    local mirrors="$1"    # a list of strings separated by '|' (pipe) chars
    local mirror m

    echo "# user added mirrors >>>"

    for m in ${mirrors//\|/ } ; do
        mirror="$(grep "^[ ]*Server[ ]*=[ ]*" "$latest_ml.orig" | grep "$m")"
        if [ -n "$mirror" ] ; then
            notif_echo2 "User added: $mirror"
            echo "$mirror"
        fi
    done
    echo2 ""
    echo "# user added mirrors <<<"
}

WriteSystemMirrorlist() {
    local eos="$1"
    local new="$2"
    local bak="$eos.$(date +%Y.%m.%d-%H.%M.%S)"
    local eosranked="$eos$ranked_suffix"
    local cmd=""
    local success=yes

    echo2 ""
    if [ "$EOS_AUTO_MIRROR_RANKING" = "yes" ] || [ "$hook_rank" = "no" ] ; then
        notif_printf2 "Moving old EndeavourOS mirrorlist to %s.\n" "$bak"
        notif_printf2 "Writing new ranked EndeavourOS mirrorlist to %s.\n" "$eos"
        $EOS_ROOTER "mv $eos $bak ; mv $new $eos ; chown root:root $eos ; chmod 0644 $eos"
        [ -r "$bak" ] || success=no    # probably password failure
    else
        notif_printf2 "Writing new ranked EndeavourOS mirrorlist to %s.\n" "$eosranked"
        $EOS_ROOTER "mv $new $eosranked ; chown root:root $eosranked ; chmod 0644 $eosranked"
        [ -r "$new" ] && success=no    # probably password failure
    fi
    case "$success" in
        yes) notif_printf2 "New mirrorlist saved.\n" ;;
        no)  notif_printf2 "New mirrorlist not saved.\n" ;;
    esac
}

#MakeShortOptions() { echo "$1" | sed -E -e 's|([a-zA-Z])|-\1 |g' -e 's| :|:|g' ; }
#MakeLongOptions()  { $(echo "--""$LONG_OPTIONS"  | sed -E 's|,| --|g') ; }

DumpOptions() {
    local user_options=(
        $(echo "$SHORT_OPTIONS" | sed -E -e 's|([a-zA-Z])|-\1 |g' -e 's| :||g')
        $(echo "--""$LONG_OPTIONS"  | sed -E -e 's|,| --|g' -e 's|:||g')
    )
    local internal_options=(
        $(echo "--""$LONG_OPTIONS_INTERNAL"  | sed -E -e 's|,| --|g' -e 's|:||g')
    )
    case "$1" in
        --all) echo "${user_options[*]} ${internal_options[*]}" ;;
        *)     echo "${user_options[*]}"
    esac
    exit 0
}

Usage() {
    cat <<EOF
Usage: $progname [options]

Options:
  --help, -h
             This help.

  --ignore '<wordlist>'
             Mirrors to be ignored from the result.
             This is useful for e.g. ignoring non-functional mirrors.
             The <wordlist> is a list of words separated by a pipe '|' character.
             Each word should be a unique part of a mirror address.
             Note that the list should be enclosed in single quotes
             if it includes more than one word.
             Example:
                 eos-rankmirrors --ignore='funami|pizza'

  --mirror-verbosity <value>
             How much information will be shown when a mirror fails.
             Supported values: see file /etc/eos-rankmirrors.conf, setting
             EOS_RANKMIRRORS_EXIT_CODE_VERBOSITY.

  --no-save, -n
             Don't save the generated mirrorlist.

  --prefer '<list-of-mirrors>'
             List of preferred mirror addresses.
             Adds given mirror addresses as the first in the EndeavourOS mirrorlist.
             The <list-of-mirrors> is a list of mirror addresses separated by
             a pipe '|' character.
             Note that the list must be enclosed in single quotes.
             Example:
                 eos-rankmirrors --prefer='https://endeavour.remi.lu/repo/\$repo/\$arch'

  --sort <value>
             Primary key for sorting the mirrors.
             Supported key values:
                 age     (latest first)
                 rate    (fastest first)
             Default: $sort_default.

  --timeout, -t <value>
             Set the timeout value (in seconds) for checking a mirror.
             Default: $timeout_default.

  --use-local-mirrorlist
             For testing purposes.
             Uses information in local $mlfolder/$pkgname as the base for ranking.

  --verbose
             Show more detailed output.

Advanced options:
  --list-only
             Save only the mirrorlist without the ranking statistics.

  --mirror-add
             Temporarily add a mirror URL for ranking (for testing purposes only).
EOF
}

Options() {
    local opts

    opts=$(getopt -o=$SHORT_OPTIONS --longoptions $LONG_OPTIONS,$LONG_OPTIONS_INTERNAL --name "$progname" -- "$@") || DIE "getopt detected unsupported option, will not continue."

    eval set -- "$opts"

    while true ; do
        case "$1" in
            # internal tool options:
            --internal-testing)         internal_testing=yes ;;
            --hook-rank)                hook_rank=yes ;;
            --dump-options)             DumpOptions ;;
            --dump-options=all)         DumpOptions --all ;;
            --mirror-add)               added_mirror="$2" ;;

            # all user options
            --help | -h)                Usage; exit 0 ;;
            --sort)                     sort="$2" ; shift ;;
            --ignore)                   ignored_mirrors="$2" ; shift ;;
            --prefer)                   preferred_mirrors="$2" ; shift ;;
            --use-local-mirrorlist)     use_local_mirrorlist=yes ;;
            --timeout | -t)             timeout="$2" ; shift ;;
            --verbose)                  verbose=yes ;;
            --mirror-verbosity)         mirror_verbosity="$2" ; shift ; Check-mirror_verbosity option ;;
            --no-save | -n)             save=no ;;
            --list-only)                mirrorlist_only=yes ;;  # and no other output
            --test-all | -a)            save=no
                                        test_all=yes
                                        EOS_IGNORED_MIRRORS=()
                                        ignored_mirrors=""
                                        [ $timeout -lt $timeout_default ] && timeout=$timeout_default
                                        ;;
            --)                         shift; break ;;
        esac
        shift
    done
    if [ "$1" ] ; then
        pkgname="$1"
        if [ "$2" ] ; then
            DIE "more than one targets detected: '$*'"
        fi
    fi
}

Check-mirror_verbosity() {
    local where="$1"   # option or configfile
    case "$mirror_verbosity" in
        all | code | show | none) ;;

        *)  printf2 "==> warning: "
            case "$where" in
                configfile) printf2 "file '$conf': EOS_RANKMIRRORS_EXIT_CODE_VERBOSITY" ;;
                option)     printf2 "option --mirror-verbosity" ;;
            esac
            echo2 " has unsupported value '$mirror_verbosity', will use '$mirror_verbosity_def'."
            mirror_verbosity="$mirror_verbosity_def"
            ;;
    esac
}

Main()
{
    local -r SHORT_OPTIONS="ahnt:"
    local -r LONG_OPTIONS="verbose,help,no-save,test-all,timeout:,sort:,ignore:,prefer:,mirror-verbosity:,use-local-mirrorlist"
    local -r LONG_OPTIONS_INTERNAL="dump-options::,hook-rank,list-only,mirror-add:,internal-testing"

    case "$1" in
        --dump-options) DumpOptions ;;
        --dump-options=all) DumpOptions --all ;;
    esac

    local -r progname="${0##*/}"
    local pkgname=endeavouros-mirrorlist
    local -r mlfolder=/etc/pacman.d
    local eos=$mlfolder/$pkgname
    local new=""
    local latest_ml=""
    local delete_at_end=()
    local arg
    local sort_default=age                    # age or rate
    local save=yes
    local hook_rank=no
    local -r ranked_suffix=".pacnew"          # was: ".ranked"  !!!
    local ignored_mirrors=""
    local preferred_mirrors=""
    local reference_level=""
    local -r mirror_verbosity_def="show"
    local mirror_verbosity=""
    local use_local_mirrorlist=no
    local mirrorlist_only=no                  # 'no' provides rather verbose output, 'yes' provides only the essential list
    local added_mirror=""
    local internal_testing=no
    local test_all=no

    if [ ! -r "$eos" ] ; then                 # this test is not really needed...
        DIE "no local $eos found, please install package '$pkgname'."
    fi

    source /usr/share/endeavouros/scripts/eos-script-lib-yad --limit-icons || return 1
    export -f eos_GetArch

    local -r conf=/etc/$progname.conf
    source $conf || DIE "Config file $conf does not exist!"

    mirror_verbosity="$EOS_RANKMIRRORS_EXIT_CODE_VERBOSITY"

    Check-mirror_verbosity configfile

    # option-related variables
    local verbose=no
    local sort=$sort_default
    local timeout_default=30                   # in seconds
    local timeout=$timeout_default
    if [ -n "$EOS_AUTORANK_TIMEOUT" ] && [ "$EOS_AUTORANK_TIMEOUT" != "$timeout_default" ] ; then
        timeout="$EOS_AUTORANK_TIMEOUT"
    fi

    eos-connection-checker || DIE "internet connection not available!"

    GetReferenceUpdateLevel

    Options "$@"

    [ "$test_all" = "no" ] && source /etc/$progname.disabled

    new=$(/usr/bin/mktemp) ; delete_at_end+=("$new")

    SimpleRank > $new
    [ "$hook_rank" = "no" ] && cat $new

    if [ -z "$(grep "^Server = " $new)" ] ; then
        DIE "ranking failed, no mirrors found!"
    fi

    if [ "$save" = "yes" ] ; then
        WriteSystemMirrorlist "$eos" "$new"
    fi

    DeleteTmpFiles
}

trap "sleep 0.2 ; DeleteTmpFiles" EXIT

Main "$@"
