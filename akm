#!/bin/bash

# use monospace (non-proportional) fonts!
#FormatVersion()     { printf "%s<tt>  </tt>" "$1" ; }
FormatVersion()     { printf "%s  " "$1" ; }
FormatName()        { FormatVersion "$1" ; }

RepoType() {
    test -z "$(grep "^\[testing\]$" /etc/pacman.conf)" && echo "Stable" || echo "Testing"
}

Header() {
    local fname="${FUNCNAME[1]}"
    case "$fname" in
        KernelOrg) fname="$KOName" ;;
        KOVersion) fname="$KOVersionName" ;;
    esac
    local hdr="<b>$fname</b>"

    if [ "$fname" = "$(RepoType)" ] ; then
        hdr+=" (current)"
    fi
    FormatVersion "$hdr"
}

LocalVersion() { /usr/bin/pacman -Q "$1" 2>/dev/null | /usr/bin/awk '{print $2}' ; }
Exist()        { test -n "$version" && echo TRUE || echo FALSE ; }

Choose() {
    local version exist xx
    cmd+=(--field="$(Header)":LBL "")
    for xx in "${kernels[@]}" ; do
        version="$(LocalVersion "$xx")"
        exist="$(Exist)"
        cmd+=(--field="":CHK "$exist")   # Field has one space, workaround for a yad bug.
                                         # Fixed in yad 7.2-1, removed workaround.
    done
}

PkgName() {
    local xx
    cmd+=(--field="$(Header)":LBL "")
    for xx in "${kernels[@]}" ; do
        cmd+=(--field="$(FormatName "$xx")":LBL "")
    done
}

Installed() {
    local version xx
    cmd+=(--field="$(Header)":LBL "")
    for xx in "${kernels[@]}" ; do
        version="$(LocalVersion "$xx")"
        cmd+=(--field="$(FormatVersion "$version")":LBL "")
    done
}

StableVersion() {
    local pkg="$1"
    local repo

    case "$pkg" in
        linux | linux-headers | linux-lts*) repo=core ;;
        linux-zen* | linux-hardened*)       repo=extra ;;
    esac
    LANG=C pacman -Si $repo/"$pkg" | grep ^Version | awk '{print $3}'
}

Stable() {
    local version xx
    cmd+=(--field="$(Header)":LBL "")
    for xx in "${kernels[@]}" ; do
        version="$(StableVersion "$xx")"
        cmd+=(--field="$(FormatVersion "$version")":LBL "")
    done
}

TestingVersion() {
    local pkg="$1"
    echo "$testinginfo" | grep -A2 /packages/testing/x86_64/$pkg/ | tail -n 1 | sed 's|^.*>\([0-9][0-9a-z\.\-]*\)<.*$|\1|'
}

Testing() {
    local URL="https://archlinux.org/packages/?sort=&repo=Testing&q=linux+kernel+and+modules"
    local testinginfo="$(/usr/bin/curl -s $URL_timeout $URL)"
    local version xx

    [ -n "$testinginfo" ] || DIE "Fetching info from https://archlinux.org failed!"

    cmd+=(--field="$(Header)":LBL "")
    for xx in "${kernels[@]}" ; do
        version="$(TestingVersion "$xx")"
        test -n "$version" || version="$na"
        cmd+=(--field="$(FormatVersion "$version")":LBL "")
    done
}

KernelOrgVersion() {
    local type="$1"
    local result="$(echo "$kernelorg" | grep -A2 $type: | grep -v EOL | grep strong | sed -e 's|^.*<strong>||' -e 's|</strong>.*$||')"
    case "$type" in
        mainline) ;;
        longterm) result="$(echo "$result" | head -n 1)" ;;
        *) result="$(echo "$result" | grep -v "[0-9][0-9\.]*-rc")" ;;
    esac
    echo "$result"
}

KernelOrg() {
    local version versions xx count=${#kernels[@]}
    cmd+=(--field="$(Header)":LBL "")
    for xx in "${org_kernels[@]}" ; do
        readarray -t versions <<< "$(KernelOrgVersion "$xx")"
        for version in "${versions[@]}" ; do
            cmd+=(--field="$(FormatName "$xx")":LBL "")
            ((count--))
        done
    done
    PaddingLines
}

KOVersion() {
    local version versions xx count=${#kernels[@]}
    local stableversion="$(KernelOrgVersion stable)"
    cmd+=(--field="$(Header)":LBL "")
    for xx in "${org_kernels[@]}" ; do
        readarray -t versions <<< "$(KernelOrgVersion "$xx")"
        case "$xx" in
            stable|longterm)
                for version in "${versions[@]}" ; do
                    cmd+=(--field="$(FormatVersion "<b>$version</b>")":LBL "")
                    ((count--))
                done
                ;;
            *)
                for version in "${versions[@]}" ; do
                    cmd+=(--field="$(FormatVersion "$version")":LBL "")
                    ((count--))
                done
                ;;
        esac
    done
    PaddingLines
}

PaddingLines() {
    for ((xx=0; xx<count; xx++)) ; do
        cmd+=(--field="$(FormatVersion "")":LBL "")
    done
}

echo2()   { echo "$@" >&2 ; }
printf2() { printf "$@" >&2 ; }

ShowFunctionLine() {
    printf2 "%sGathering information: %3.f%%" $'\r' "$((100*SERVICES_DONE/SERVICES))"
}
ShowFunctionStart() {
    SERVICES=${#functions[@]}
    SERVICES_DONE=0
    ShowFunctionLine
}
ShowFunction()      { ((SERVICES_DONE++)) ; ShowFunctionLine ; }
ShowFunctionEnd()   { printf2 "\n" ; }

CommonStuff() {
    local EOS_SCRIPTS_YAD=/usr/share/endeavouros/scripts/eos-script-lib-yad
    if [ ! -f $EOS_SCRIPTS_YAD ] ; then
        echo2 "Sorry, package 'eos-bash-shared' is not installed."
        exit 1
    fi
    source $EOS_SCRIPTS_YAD
    export -f eos_yad
    export -f eos_yad_RunCmdTermBash
    export -f eos_yad_terminal

    curl --silent --connect-timeout 8 https://archlinux.org >/dev/null || DIE "Sorry, archlinux site is unavailable!"
}

AkmConfig() {
    local conf=/etc/akm.conf
    local xx
    if [ -f $conf ] ; then
        source $conf

        xx="$KERNEL_HEADER_WITH_KERNEL"
        [ -n "$xx" ] && connect_header_with_kernel="$xx"
        echo "==> Config file $conf read." >&2
    fi
}

DIE() {
    eos_yad --form --width=400 --title="AKM failure" --image=error --text="$1" --button=yad-quit
    exit 1
}

UniqueArr() {
    # remove duplicates from an array 'arr'
    local -n arr=$1
    local to=()
    local xx yy

    for xx in "${arr[@]}" ; do
        for yy in "${to[@]}" ; do
            [ "$xx" = "$yy" ] && break
        done
        [ "$xx" != "$yy" ] && to+=("$xx")
    done
    arr=("${to[@]}")
}

Options() {
    local arg
    for arg in "$@" ; do
        case "$arg" in
            --connect-header) connect_header_with_kernel=yes ;;
            -*) DIE "unsupported option '$arg'" ;;
            *) DIE "unsupported parameter '$arg'" ;;
        esac
    done
}

AvailableKernelsAndHeaders() {

    # Find kernel packages by finding packages which have words 'linux' and 'headers'
    # From the output of 'pacman -Sl'
    # - find lines that have words: 'linux' and 'headers'
    # - drop lines containing 'testing' (=testing repo, causes duplicates) and 'linux-api-headers' (=not a kernel header)
    # - show the (header) package names
    # Now we have names of the "kernel headers".
    # Then add the kernel packages to proper places and output the result.

    local headers=$(pacman -Sl | grep "^[^ ]* linux[^ ]*headers" | grep -Pv '^testing | linux-api-headers ' | awk '{print $2}')  # find linux*headers packages
    local header
    local kernel

    for header in $headers ; do
        kernel=$(echo "$header" | sed 's|-headers$||')
        echo "$kernel $header"
    done
}

Main()
{
    local na="(-)"
    local kernels=()

    if [ "$1" = "-t" ] ; then
        echo "==> Info: experimental detection of kernel packages."
        kernels=( $(AvailableKernelsAndHeaders) )
        shift
    else
        kernels=(
            linux             linux-headers
            linux-lts         linux-lts-headers
            linux-zen         linux-zen-headers
            linux-hardened    linux-hardened-headers
        )
    fi
    local functions=(  # order is important!
        Choose
        PkgName
        Installed
        Stable
        Testing
        KernelOrg
        KOVersion
    )
    local connect_header_with_kernel=no    # default, change with option --connect-header

    CommonStuff
    AkmConfig
    Options "$@"

    # echo "connect_header_with_kernel = $connect_header_with_kernel" >&2

    ShowFunctionStart

    local URL_timeout="--max-time 30"                      # used for all curl calls here

    local URL="https://www.kernel.org"
    local kernelorg="$(/usr/bin/curl -s $URL_timeout $URL)"    
    local org_kernels=(mainline stable longterm linux-next)
    local KOName="K.o.category"
    local KOVersionName="K.o.version"
    local xx
    local t1=""

    test -n "$kernelorg" || DIE "Fetching info from $URL failed.\n"

    t1+="Here you'll see information about currently installed and available Linux kernels.\n"
    t1+="You can install and/or uninstall kernel packages using the checkboxes on the left column.\n"
    t1+="\n"
    t1+="Column headers:\n"
    t1+="<tt>"
    t1+="    Choose        Checkboxes for installing/uninstalling kernel packages.\n"
    t1+="    PkgName       Kernel package name.\n"
    t1+="    Installed     Currently installed kernel package versions.\n"
    t1+="    Stable        Versions available from the stable repos.\n"
    t1+="    Testing       Versions available from the testing repos.\n"
    t1+="    $KOName  Kernel category at kernel.org.\n"
    t1+="    $KOVersionName   Latest version announced at kernel.org.\n\n"
    t1+="</tt>"
    t1+="Your current repos are either Stable or Testing (see /etc/pacman.conf).\n"
    t1+="Marking <b>$na</b> means: info not available.\n"
    if [ "$connect_header_with_kernel" = "yes" ] ; then
        t1+="\n"
        t1+="You have configured the header to install/uninstall along with the kernel.\n"
        t1+="If a chosen kernel setting below contradicts its header setting, the kernel setting is used for header, too.\n"
    else
        t1+="\n"
        t1+="You have configured the header and kernel to install/uninstall separately (default behavior).\n"
        t1+="See file /etc/akm.conf for more info.\n"
    fi

    local cmd=(
        eos_yad
        --width=750
        --form --title="Simple kernel manager" --columns=${#functions[@]}
        --text="$t1"
        --image=system-software-update
        --button="Cancel!gtk-cancel!Change nothing":1
        --button="Execute!system-run!Make your changes":0
    )

    for xx in "${functions[@]}" ; do
        ShowFunction
        $xx || DIE "Function '$xx' failed.\n"
    done
    ShowFunctionEnd

    local ix installed install=() uninstall=() pkg partner
    local result="$("${cmd[@]}")"
    declare -A pkgstatus
    test -z "$result" && return

    if [ "$(echo "$result" | wc -l)" != "1" ] ; then
        DIE "yad output is garbage!"
    fi

    result="${result:1}"                               # skip first LBL field !!

    for ((ix=0; ix < ${#kernels[@]}; ix++)) ; do
        pkg="${kernels[$ix]}"
        pkgstatus[$pkg]="$(echo "$result" | cut -d '|' -f $((ix+1)))"   # TRUE or FALSE

        if [ "$connect_header_with_kernel" = "yes" ] ; then

            # Note: a kernel may have TRUE but header FALSE!
            # When connecting header with kernel this may conflict.
            # To solve this, assume kernel value is stronger.
            # Remember that the kernel value exists because it is set
            # before the header value in the local variable 'kernels' above.

            case "$pkg" in
                *-headers)
                    partner="${pkg%-headers}"
                    pkgstatus[$pkg]="${pkgstatus[$partner]}"  # kernel value overrides the header value!
                    ;;
            esac
        fi
    done

    for ((ix=0; ix < ${#kernels[@]}; ix++)) ; do
        pkg="${kernels[$ix]}"
        if [ "$connect_header_with_kernel" = "yes" ] ; then
            case "$pkg" in
                *-headers) partner="${pkg%-headers}" ;;
                *)         partner="$pkg"-headers    ;;
            esac
        fi

        case "${pkgstatus[$pkg]}" in
            TRUE)
                [ -z "$(LocalVersion "$pkg")" ] && install+=("$pkg")
                if [ "$connect_header_with_kernel" = "yes" ] ; then
                    [ -z "$(LocalVersion "$partner")" ] && install+=("$partner")
                fi
                ;;
            FALSE)
                [ -n "$(LocalVersion "$pkg")" ] && uninstall+=("$pkg")
                if [ "$connect_header_with_kernel" = "yes" ] ; then
                    [ -n "$(LocalVersion "$partner")" ] && uninstall+=("$partner")
                fi
                ;;
        esac
    done

    UniqueArr install
    UniqueArr uninstall

    cmd=()
    test -n "$uninstall" && cmd+=(pacman -Rsn ${uninstall[*]} ";")
    test -n "$install"   && cmd+=(pacman -S ${install[*]} ";")

    if [ 0 -eq 1 ] ; then
        echo "uninstall = ${uninstall[*]}"
        echo "install   = ${install[*]}"
        return
    fi

    if [ -n "$cmd" ] ; then
        eos_yad_RunCmdTermBash "echo '${cmd[*]}' ; sudo bash -c '${cmd[*]}'"
    fi
}

Main "$@"
